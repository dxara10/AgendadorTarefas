import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { AppModule } from './app.module';

/**
 * Fun√ß√£o principal que inicializa a aplica√ß√£o NestJS
 * 
 * Configura√ß√µes aplicadas:
 * - Valida√ß√£o global de DTOs
 * - CORS para frontend
 * - Documenta√ß√£o Swagger
 * - Servidor HTTP na porta configurada
 */
async function bootstrap() {
  // Cria a inst√¢ncia da aplica√ß√£o NestJS
  const app = await NestFactory.create(AppModule);
  
  /**
   * Configura√ß√£o global de valida√ß√£o
   * 
   * - whitelist: Remove propriedades n√£o definidas nos DTOs
   * - forbidNonWhitelisted: Lan√ßa erro se propriedades extras forem enviadas
   * - transform: Converte tipos automaticamente (string -> number, etc.)
   */
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // Remove campos n√£o definidos no DTO
      forbidNonWhitelisted: true, // Rejeita requisi√ß√µes com campos extras
      transform: true, // Transforma tipos automaticamente
    }),
  );

  /**
   * Configura√ß√£o CORS (Cross-Origin Resource Sharing)
   * 
   * Permite que o frontend acesse a API de diferentes portas
   * - 3000: Caso o frontend rode na mesma porta
   * - 5173: Porta padr√£o do Vite (React)
   */
  app.enableCors({
    origin: ['http://localhost:3000', 'http://localhost:5173', 'http://localhost:5174', 'http://localhost:5175', 'http://localhost:5176'],
    credentials: true, // Permite cookies e headers de autentica√ß√£o
  });

  /**
   * Configura√ß√£o do Swagger (Documenta√ß√£o da API)
   * 
   * Gera interface web interativa para testar endpoints
   * Dispon√≠vel em: http://localhost:3000/api
   */
  const config = new DocumentBuilder()
    .setTitle('Gerenciador de Tarefas Jur√≠dicas')
    .setDescription('API para gerenciamento de tarefas em escrit√≥rios de advocacia')
    .setVersion('1.0')
    // Configura autentica√ß√£o JWT no Swagger
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        name: 'JWT',
        description: 'Digite o token JWT',
        in: 'header',
      },
      'JWT-auth', // Nome usado nos controllers com @ApiBearerAuth
    )
    .build();

  // Gera a documenta√ß√£o baseada nos decorators dos controllers
  const document = SwaggerModule.createDocument(app, config);
  // Disponibiliza a interface Swagger na rota /api
  SwaggerModule.setup('api', app, document);

  // Inicia o servidor HTTP
  const port = process.env.PORT || 3000;
  await app.listen(port);
  
  // Logs informativos
  console.log(`üöÄ API rodando na porta ${port}`);
  console.log(`üìö Swagger dispon√≠vel em http://localhost:${port}/api`);
}

// Inicia a aplica√ß√£o
bootstrap();
